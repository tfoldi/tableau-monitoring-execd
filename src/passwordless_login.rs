// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![cfg_attr(feature = "cargo-clippy", allow(too_many_arguments, type_complexity))]
#![cfg_attr(rustfmt, rustfmt_skip)]

extern crate thrift;

use thrift::OrderedFloat;
use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum PasswordLessLoginReturnCode {
  PllSuccess = 0,
  PllNotAuthorized = 1,
  PllError = 2,
}

impl PasswordLessLoginReturnCode {
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    o_prot.write_i32(*self as i32)
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<PasswordLessLoginReturnCode> {
    let enum_value = i_prot.read_i32()?;
    PasswordLessLoginReturnCode::try_from(enum_value)  }
}

impl TryFrom<i32> for PasswordLessLoginReturnCode {
  type Error = thrift::Error;  fn try_from(i: i32) -> Result<Self, Self::Error> {
    match i {
      0 => Ok(PasswordLessLoginReturnCode::PllSuccess),
      1 => Ok(PasswordLessLoginReturnCode::PllNotAuthorized),
      2 => Ok(PasswordLessLoginReturnCode::PllError),
      _ => {
        Err(
          thrift::Error::Protocol(
            ProtocolError::new(
              ProtocolErrorKind::InvalidData,
              format!("cannot convert enum constant {} to PasswordLessLoginReturnCode", i)
            )
          )
        )
      },
    }
  }
}

//
// PasswordLessLoginResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct PasswordLessLoginResult {
  pub return_code: Option<PasswordLessLoginReturnCode>,
  pub username: Option<String>,
  pub cookie_name: Option<String>,
  pub cookie_value: Option<String>,
  pub cookie_max_age: Option<i32>,
}

impl PasswordLessLoginResult {
  pub fn new<F1, F2, F3, F4, F5>(return_code: F1, username: F2, cookie_name: F3, cookie_value: F4, cookie_max_age: F5) -> PasswordLessLoginResult where F1: Into<Option<PasswordLessLoginReturnCode>>, F2: Into<Option<String>>, F3: Into<Option<String>>, F4: Into<Option<String>>, F5: Into<Option<i32>> {
    PasswordLessLoginResult {
      return_code: return_code.into(),
      username: username.into(),
      cookie_name: cookie_name.into(),
      cookie_value: cookie_value.into(),
      cookie_max_age: cookie_max_age.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<PasswordLessLoginResult> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<PasswordLessLoginReturnCode> = None;
    let mut f_2: Option<String> = Some("".to_owned());
    let mut f_3: Option<String> = Some("".to_owned());
    let mut f_4: Option<String> = Some("".to_owned());
    let mut f_5: Option<i32> = Some(0);
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = PasswordLessLoginReturnCode::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_i32()?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = PasswordLessLoginResult {
      return_code: f_1,
      username: f_2,
      cookie_name: f_3,
      cookie_value: f_4,
      cookie_max_age: f_5,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("PasswordLessLoginResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.return_code {
      o_prot.write_field_begin(&TFieldIdentifier::new("returnCode", TType::I32, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.username {
      o_prot.write_field_begin(&TFieldIdentifier::new("username", TType::String, 2))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.cookie_name {
      o_prot.write_field_begin(&TFieldIdentifier::new("cookieName", TType::String, 3))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.cookie_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("cookieValue", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(fld_var) = self.cookie_max_age {
      o_prot.write_field_begin(&TFieldIdentifier::new("cookieMaxAge", TType::I32, 5))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for PasswordLessLoginResult {
  fn default() -> Self {
    PasswordLessLoginResult{
      return_code: None,
      username: Some("".to_owned()),
      cookie_name: Some("".to_owned()),
      cookie_value: Some("".to_owned()),
      cookie_max_age: Some(0),
    }
  }
}

//
// PasswordLessLogin service client
//

pub trait TPasswordLessLoginSyncClient {
  fn login(&mut self) -> thrift::Result<PasswordLessLoginResult>;
}

pub trait TPasswordLessLoginSyncClientMarker {}

pub struct PasswordLessLoginSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> PasswordLessLoginSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> PasswordLessLoginSyncClient<IP, OP> {
    PasswordLessLoginSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for PasswordLessLoginSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TPasswordLessLoginSyncClientMarker for PasswordLessLoginSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + TPasswordLessLoginSyncClientMarker> TPasswordLessLoginSyncClient for C {
  fn login(&mut self) -> thrift::Result<PasswordLessLoginResult> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("login", TMessageType::Call, self.sequence_number());
        let call_args = PasswordLessLoginLoginArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("login", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = PasswordLessLoginLoginResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// PasswordLessLogin service processor
//

pub trait PasswordLessLoginSyncHandler {
  fn handle_login(&self) -> thrift::Result<PasswordLessLoginResult>;
}

pub struct PasswordLessLoginSyncProcessor<H: PasswordLessLoginSyncHandler> {
  handler: H,
}

impl <H: PasswordLessLoginSyncHandler> PasswordLessLoginSyncProcessor<H> {
  pub fn new(handler: H) -> PasswordLessLoginSyncProcessor<H> {
    PasswordLessLoginSyncProcessor {
      handler,
    }
  }
  fn process_login(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TPasswordLessLoginProcessFunctions::process_login(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct TPasswordLessLoginProcessFunctions;

impl TPasswordLessLoginProcessFunctions {
  pub fn process_login<H: PasswordLessLoginSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = PasswordLessLoginLoginArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_login() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("login", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = PasswordLessLoginLoginResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("login", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("login", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: PasswordLessLoginSyncHandler> TProcessor for PasswordLessLoginSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "login" => {
        self.process_login(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// PasswordLessLoginLoginArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct PasswordLessLoginLoginArgs {
}

impl PasswordLessLoginLoginArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<PasswordLessLoginLoginArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = PasswordLessLoginLoginArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("login_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// PasswordLessLoginLoginResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct PasswordLessLoginLoginResult {
  result_value: Option<PasswordLessLoginResult>,
}

impl PasswordLessLoginLoginResult {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<PasswordLessLoginLoginResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<PasswordLessLoginResult> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = PasswordLessLoginResult::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = PasswordLessLoginLoginResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("PasswordLessLoginLoginResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
  fn ok_or(self) -> thrift::Result<PasswordLessLoginResult> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for PasswordLessLoginLogin"
          )
        )
      )
    }
  }
}

